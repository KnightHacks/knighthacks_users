directive @goModel(model: String, models: [String!]) on OBJECT
    | INPUT_OBJECT
    | SCALAR
    | ENUM
    | INTERFACE
    | UNION

directive @goField(forceResolver: Boolean, name: String) on INPUT_FIELD_DEFINITION
    | FIELD_DEFINITION

directive @hasRole(role: Role!) on FIELD_DEFINITION | OBJECT # set minimum layer of security

type User @key(fields:"id") @key(fields:"oAuth { uid provider }") {
  id: ID!
  firstName: String!
  lastName: String!
  fullName: String! @goField(forceResolver: true)

  email: String! @hasRole(role: OWNS)
  phoneNumber: String! @hasRole(role: OWNS)
  pronouns: Pronouns
  age: Int @hasRole(role: OWNS)
  role: Role! @hasRole(role: OWNS)

  oAuth: OAuth! @goField(forceResolver: true) @hasRole(role: OWNS)
}

"""
Example:
subjective=he
objective=him
"""
type Pronouns {
    subjective: String!
    objective: String!
}

enum Provider @goModel(model: "github.com/KnightHacks/knighthacks_shared/models.Provider") {
    GITHUB
    GMAIL
}

enum Role @goModel(model: "github.com/KnightHacks/knighthacks_shared/models.Role") {
    ADMIN
    """
    for now keep this the same
    """
    SPONSOR
    NORMAL
    OWNS
}

type OAuth {
    provider: Provider!
    uid: String!
}

input PronounsInput {
    subjective: String!
    objective: String!
}

input NewUser {
  firstName: String!
  lastName: String!
  email: String!
  phoneNumber: String!
  pronouns: PronounsInput
  age: Int
}

type LoginPayload {
    """
    If false then you must register immediately following this. Else, you are logged in and have access to your own user.
    """
    accountExists: Boolean!
    user: User
    accessToken: String
    refreshToken: String

    encryptedOAuthAccessToken: String
}

type RegistrationPayload {
    user: User!
    accessToken: String!
    refreshToken: String!
}

type Query {
  """
  The code supplied must be the code given to the frontend by the oauth flow
  Step 1 response https://docs.github.com/en/developers/apps/building-oauth-apps/authorizing-oauth-apps
  """
  getAuthRedirectLink(provider: Provider!): String!
  login(provider: Provider!, code: String!): LoginPayload!
  refreshJWT(refreshToken: String!): String! @hasRole(role: NORMAL)
  users: [User!]! @hasRole(role: ADMIN)

  getUser(id: ID!): User @hasRole(role: NORMAL)
  searchUser(name: String!): [User!]! @hasRole(role: NORMAL)
  me: User @hasRole(role: NORMAL)
}

type Mutation {
  """
  To receive an encryptedOAuthAccessToken first call the Login query
  """
  register(provider: Provider!, encryptedOAuthAccessToken: String!, input: NewUser!): RegistrationPayload!
  updateUser(id: ID!, input: NewUser!): User! @hasRole(role: NORMAL)
  deleteUser(id: ID!): Boolean! @hasRole(role: NORMAL)
}

