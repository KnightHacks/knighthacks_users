directive @goModel(model: String, models: [String!]) on OBJECT
    | INPUT_OBJECT
    | SCALAR
    | ENUM
    | INTERFACE
    | UNION

directive @goField(forceResolver: Boolean, name: String) on INPUT_FIELD_DEFINITION
    | FIELD_DEFINITION

directive @hasRole(role: Role!) on FIELD_DEFINITION | OBJECT # set minimum layer of security
directive @pagination(maxLength: Int!) on FIELD_DEFINITION

interface Connection {
    # The total number of entries
    totalCount: Int
    # Information for paginating this connection
    pageInfo: PageInfo!
}

type PageInfo @goModel(model: "github.com/KnightHacks/knighthacks_shared/models.PageInfo") {
    # the first entry
    startCursor: String!
    # the last entry
    endCursor: String!
}

# A connection object for a list of users
type UsersConnection implements Connection {
    totalCount: Int!
    pageInfo: PageInfo!

    users: [User!]!
}

type User @key(fields:"id") @key(fields:"oAuth { uid provider }") {
    id: ID!
    firstName: String!
    lastName: String!
    fullName: String! @goField(forceResolver: true)

    email: String! @hasRole(role: OWNS)
    phoneNumber: String! @hasRole(role: OWNS)
    pronouns: Pronouns
    age: Int @hasRole(role: OWNS)
    role: Role! @hasRole(role: OWNS)

    oAuth: OAuth! @goField(forceResolver: true) @hasRole(role: OWNS)
}

"""
Example:
subjective=he
objective=him
"""
type Pronouns {
    subjective: String!
    objective: String!
}

enum Provider @goModel(model: "github.com/KnightHacks/knighthacks_shared/models.Provider") {
    GITHUB
    GMAIL
}

enum Role @goModel(model: "github.com/KnightHacks/knighthacks_shared/models.Role") {
    ADMIN
    """
    for now keep this the same
    """
    SPONSOR
    NORMAL
    OWNS
}

type OAuth {
    provider: Provider!
    uid: String!
}

input PronounsInput {
    subjective: String!
    objective: String!
}

input MLHTermsInput {
    sendMessages: Boolean!
    codeOfConduct: Boolean!
    shareInfo: Boolean!
}

input MailingAddressInput {
    country: String!
    state: String!
    city: String!
    postalCode: String!
    addressLines: [String!]!
}

input EducationInfoInput {
    name: String!
    graduationDate: String!
    major: String!
    level: LevelOfStudy
}

enum LevelOfStudy {
    FRESHMAN, SOPHOMORE, JUNIOR, SENIOR, SUPER_SENIOR, GRADUATE
}

enum ShirtSize {
    XS, S, M, L, XL, XXL, XXXL, XXXXL # idk what sizes, TODO: Look into what shirt sizes we will have
}

input NewUser {
    firstName: String!
    lastName: String!
    email: String!
    phoneNumber: String!
    pronouns: PronounsInput
    age: Int
    mailingAddress: MailingAddressInput
    mlh: MLHTermsInput!
    shirtSize: ShirtSize!
    yearsOfExperience: Float
    educationInfo: EducationInfoInput!
}

input UpdatedUser {
    firstName: String
    lastName: String
    email: String
    phoneNumber: String
    pronouns: PronounsInput
    age: Int
}

type LoginPayload {
    """
    If false then you must register immediately following this. Else, you are logged in and have access to your own user.
    """
    accountExists: Boolean!
    user: User
    accessToken: String
    refreshToken: String

    encryptedOAuthAccessToken: String
}

type RegistrationPayload {
    user: User!
    accessToken: String!
    refreshToken: String!
}

type Query {
    """
    The code supplied must be the code given to the frontend by the oauth flow
    Step 1 response https://docs.github.com/en/developers/apps/building-oauth-apps/authorizing-oauth-apps
    """
    getAuthRedirectLink(provider: Provider!, redirect: String): String!
    login(provider: Provider!, code: String!, state: String!): LoginPayload!
    refreshJWT(refreshToken: String!): String! @hasRole(role: NORMAL)
    users(first: Int!, after: String): UsersConnection! @pagination(maxLength: 20) @hasRole(role: ADMIN)
    getUser(id: ID!): User @hasRole(role: NORMAL)
    searchUser(name: String!): [User!]! @hasRole(role: NORMAL)
    me: User @hasRole(role: NORMAL)
}

type Mutation {
    """
    To receive an encryptedOAuthAccessToken first call the Login query
    """
    register(provider: Provider!, encryptedOAuthAccessToken: String!, input: NewUser!): RegistrationPayload!
    updateUser(id: ID!, input: UpdatedUser!): User! @hasRole(role: NORMAL)
    deleteUser(id: ID!): Boolean! @hasRole(role: NORMAL)
}

