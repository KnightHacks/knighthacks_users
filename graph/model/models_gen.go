// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/KnightHacks/knighthacks_shared/models"
)

type Connection interface {
	IsConnection()
	GetTotalCount() *int
	GetPageInfo() *models.PageInfo
}

type APIKey struct {
	Created time.Time `json:"created"`
	Key     string    `json:"key"`
}

type EducationInfo struct {
	Name           string        `json:"name"`
	GraduationDate time.Time     `json:"graduationDate"`
	Major          string        `json:"major"`
	Level          *LevelOfStudy `json:"level,omitempty"`
}

type EducationInfoInput struct {
	Name           string        `json:"name"`
	GraduationDate time.Time     `json:"graduationDate"`
	Major          string        `json:"major"`
	Level          *LevelOfStudy `json:"level,omitempty"`
}

type EducationInfoUpdate struct {
	Name           *string       `json:"name,omitempty"`
	GraduationDate *time.Time    `json:"graduationDate,omitempty"`
	Major          *string       `json:"major,omitempty"`
	Level          *LevelOfStudy `json:"level,omitempty"`
}

type HackathonApplication struct {
	ID   string `json:"id"`
	User *User  `json:"user"`
}

func (HackathonApplication) IsEntity() {}

type LoginPayload struct {
	// If false then you must register immediately following this. Else, you are logged in and have access to your own user.
	AccountExists bool    `json:"accountExists"`
	User          *User   `json:"user,omitempty"`
	AccessToken   *string `json:"accessToken,omitempty"`
	RefreshToken  *string `json:"refreshToken,omitempty"`
	// Not null when accountExists is false, use this in registration
	EncryptedOAuthAccessToken *string `json:"encryptedOAuthAccessToken,omitempty"`
}

type MLHTerms struct {
	SendMessages  bool `json:"sendMessages"`
	CodeOfConduct bool `json:"codeOfConduct"`
	ShareInfo     bool `json:"shareInfo"`
}

type MLHTermsInput struct {
	SendMessages  bool `json:"sendMessages"`
	CodeOfConduct bool `json:"codeOfConduct"`
	ShareInfo     bool `json:"shareInfo"`
}

type MLHTermsUpdate struct {
	SendMessages  *bool `json:"sendMessages,omitempty"`
	CodeOfConduct *bool `json:"codeOfConduct,omitempty"`
	ShareInfo     *bool `json:"shareInfo,omitempty"`
}

type MailingAddress struct {
	Country      string   `json:"country"`
	State        string   `json:"state"`
	City         string   `json:"city"`
	PostalCode   string   `json:"postalCode"`
	AddressLines []string `json:"addressLines"`
}

type MailingAddressInput struct {
	Country      string   `json:"country"`
	State        string   `json:"state"`
	City         string   `json:"city"`
	PostalCode   string   `json:"postalCode"`
	AddressLines []string `json:"addressLines"`
}

type MailingAddressUpdate struct {
	Country      *string  `json:"country,omitempty"`
	State        *string  `json:"state,omitempty"`
	City         *string  `json:"city,omitempty"`
	PostalCode   *string  `json:"postalCode,omitempty"`
	AddressLines []string `json:"addressLines,omitempty"`
}

type NewUser struct {
	FirstName         string               `json:"firstName"`
	LastName          string               `json:"lastName"`
	Email             string               `json:"email"`
	PhoneNumber       string               `json:"phoneNumber"`
	Pronouns          *PronounsInput       `json:"pronouns,omitempty"`
	Age               *int                 `json:"age,omitempty"`
	MailingAddress    *MailingAddressInput `json:"mailingAddress,omitempty"`
	Mlh               *MLHTermsInput       `json:"mlh,omitempty"`
	ShirtSize         *ShirtSize           `json:"shirtSize,omitempty"`
	YearsOfExperience *float64             `json:"yearsOfExperience,omitempty"`
	EducationInfo     *EducationInfoInput  `json:"educationInfo,omitempty"`
	Gender            *string              `json:"gender,omitempty"`
	Race              *Race                `json:"race,omitempty"`
}

type OAuth struct {
	Provider models.Provider `json:"provider"`
	UID      string          `json:"uid"`
}

// Example:
// subjective=he
// objective=him
type Pronouns struct {
	Subjective string `json:"subjective"`
	Objective  string `json:"objective"`
}

type PronounsInput struct {
	Subjective string `json:"subjective"`
	Objective  string `json:"objective"`
}

type RegistrationPayload struct {
	User         *User  `json:"user"`
	AccessToken  string `json:"accessToken"`
	RefreshToken string `json:"refreshToken"`
}

type UpdatedUser struct {
	FirstName         *string               `json:"firstName,omitempty"`
	LastName          *string               `json:"lastName,omitempty"`
	Email             *string               `json:"email,omitempty"`
	PhoneNumber       *string               `json:"phoneNumber,omitempty"`
	Pronouns          *PronounsInput        `json:"pronouns,omitempty"`
	Age               *int                  `json:"age,omitempty"`
	MailingAddress    *MailingAddressUpdate `json:"mailingAddress,omitempty"`
	Mlh               *MLHTermsUpdate       `json:"mlh,omitempty"`
	ShirtSize         *ShirtSize            `json:"shirtSize,omitempty"`
	YearsOfExperience *float64              `json:"yearsOfExperience,omitempty"`
	EducationInfo     *EducationInfoUpdate  `json:"educationInfo,omitempty"`
	Gender            *string               `json:"gender,omitempty"`
	Race              *Race                 `json:"race,omitempty"`
}

type User struct {
	ID                string          `json:"id"`
	FirstName         string          `json:"firstName"`
	LastName          string          `json:"lastName"`
	FullName          string          `json:"fullName"`
	Email             string          `json:"email"`
	PhoneNumber       string          `json:"phoneNumber"`
	Pronouns          *Pronouns       `json:"pronouns,omitempty"`
	Age               *int            `json:"age,omitempty"`
	Role              models.Role     `json:"role"`
	Gender            *string         `json:"gender,omitempty"`
	Race              *Race           `json:"race,omitempty"`
	OAuth             *OAuth          `json:"oAuth"`
	MailingAddress    *MailingAddress `json:"mailingAddress,omitempty"`
	Mlh               *MLHTerms       `json:"mlh,omitempty"`
	ShirtSize         *ShirtSize      `json:"shirtSize,omitempty"`
	YearsOfExperience *float64        `json:"yearsOfExperience,omitempty"`
	EducationInfo     *EducationInfo  `json:"educationInfo,omitempty"`
	APIKey            *APIKey         `json:"apiKey"`
}

func (User) IsEntity() {}

type UsersConnection struct {
	TotalCount int              `json:"totalCount"`
	PageInfo   *models.PageInfo `json:"pageInfo"`
	Users      []*User          `json:"users"`
}

func (UsersConnection) IsConnection()                      {}
func (this UsersConnection) GetTotalCount() *int           { return &this.TotalCount }
func (this UsersConnection) GetPageInfo() *models.PageInfo { return this.PageInfo }

type LevelOfStudy string

const (
	LevelOfStudyFreshman    LevelOfStudy = "FRESHMAN"
	LevelOfStudySophomore   LevelOfStudy = "SOPHOMORE"
	LevelOfStudyJunior      LevelOfStudy = "JUNIOR"
	LevelOfStudySenior      LevelOfStudy = "SENIOR"
	LevelOfStudySuperSenior LevelOfStudy = "SUPER_SENIOR"
	LevelOfStudyGraduate    LevelOfStudy = "GRADUATE"
)

var AllLevelOfStudy = []LevelOfStudy{
	LevelOfStudyFreshman,
	LevelOfStudySophomore,
	LevelOfStudyJunior,
	LevelOfStudySenior,
	LevelOfStudySuperSenior,
	LevelOfStudyGraduate,
}

func (e LevelOfStudy) IsValid() bool {
	switch e {
	case LevelOfStudyFreshman, LevelOfStudySophomore, LevelOfStudyJunior, LevelOfStudySenior, LevelOfStudySuperSenior, LevelOfStudyGraduate:
		return true
	}
	return false
}

func (e LevelOfStudy) String() string {
	return string(e)
}

func (e *LevelOfStudy) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LevelOfStudy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LevelOfStudy", str)
	}
	return nil
}

func (e LevelOfStudy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Race string

const (
	RaceAmericanIndianOrAlaskanNative        Race = "AMERICAN_INDIAN_OR_ALASKAN_NATIVE"
	RaceAsian                                Race = "ASIAN"
	RaceBlackOrAfricanAmerican               Race = "BLACK_OR_AFRICAN_AMERICAN"
	RaceHispanicOrLatino                     Race = "HISPANIC_OR_LATINO"
	RaceMiddleEastern                        Race = "MIDDLE_EASTERN"
	RaceNativeHawaiianOrOtherPacificIslander Race = "NATIVE_HAWAIIAN_OR_OTHER_PACIFIC_ISLANDER"
	RaceWhite                                Race = "WHITE"
	RaceTwoOrMore                            Race = "TWO_OR_MORE"
)

var AllRace = []Race{
	RaceAmericanIndianOrAlaskanNative,
	RaceAsian,
	RaceBlackOrAfricanAmerican,
	RaceHispanicOrLatino,
	RaceMiddleEastern,
	RaceNativeHawaiianOrOtherPacificIslander,
	RaceWhite,
	RaceTwoOrMore,
}

func (e Race) IsValid() bool {
	switch e {
	case RaceAmericanIndianOrAlaskanNative, RaceAsian, RaceBlackOrAfricanAmerican, RaceHispanicOrLatino, RaceMiddleEastern, RaceNativeHawaiianOrOtherPacificIslander, RaceWhite, RaceTwoOrMore:
		return true
	}
	return false
}

func (e Race) String() string {
	return string(e)
}

func (e *Race) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Race(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Race", str)
	}
	return nil
}

func (e Race) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ShirtSize string

const (
	ShirtSizeXs    ShirtSize = "XS"
	ShirtSizeS     ShirtSize = "S"
	ShirtSizeM     ShirtSize = "M"
	ShirtSizeL     ShirtSize = "L"
	ShirtSizeXl    ShirtSize = "XL"
	ShirtSizeXxl   ShirtSize = "XXL"
	ShirtSizeXxxl  ShirtSize = "XXXL"
	ShirtSizeXxxxl ShirtSize = "XXXXL"
)

var AllShirtSize = []ShirtSize{
	ShirtSizeXs,
	ShirtSizeS,
	ShirtSizeM,
	ShirtSizeL,
	ShirtSizeXl,
	ShirtSizeXxl,
	ShirtSizeXxxl,
	ShirtSizeXxxxl,
}

func (e ShirtSize) IsValid() bool {
	switch e {
	case ShirtSizeXs, ShirtSizeS, ShirtSizeM, ShirtSizeL, ShirtSizeXl, ShirtSizeXxl, ShirtSizeXxxl, ShirtSizeXxxxl:
		return true
	}
	return false
}

func (e ShirtSize) String() string {
	return string(e)
}

func (e *ShirtSize) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ShirtSize(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ShirtSize", str)
	}
	return nil
}

func (e ShirtSize) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
